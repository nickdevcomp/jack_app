class Drawer{
    field int x,y;
    field int size;

    constructor Drawer new(int x_, int y_, int size_){
        let x = x_;
        let y = y_;
        let size = size_;
        return this;
    }

    constructor Drawer newFromEraser(Eraser eraser){
        let x = eraser.x();
        let y = eraser.y();
        let size = eraser.size();
        return this;
    }

    constructor Drawer newFromGhost(Ghost ghost){
        let x = ghost.x();
        let y = ghost.y();
        let size = ghost.size();
        return this;
    }
    
    method void moveTo ( int x1, int y1 ) {
        let x = x1;
        let y = y1;
        do draw();
        return;
    }

    method int x ( ) {
        return x;
    }

    method int y ( ) {
        return y;
    }

    method int size ( ) {
        return size;
    }

    method void draw ( ) {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x+size, y+size);

        //возможно стоило вынести в отдельный метод
        do OutputExtensions.cleanChars(2, 56, 6);
        do Output.moveCursor(2, 56);
        do Output.printInt(x);
        do OutputExtensions.cleanChars(4, 56, 6);
        do Output.moveCursor(4, 56);
        do Output.printInt(y);
        return;
    }

    method void erase ( ) {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x+size, y+size);
        return;
    }

    method void incSize () {
        if(((y+size) < 254) & ((x+size) < 378)) {
            do erase();
            let size = size + 2;
            do draw();
        }
        return;
    }

    method void decSize ( ) {
        if(size > 4) {
            do erase();
            let size = size - 2;
            do draw();
        }
        return;
    }

    method void moveUp ( ) {
        do move(y > 1, 0, -2);
        return;
    }

    method void moveDown ( ) {
        do move(y + size < 254, 0, 2);
        return;
    }

    method void moveLeft ( ) {
        do move(x > 1, -2, 0);
        return;
    }

    method void moveRight ( ) {
        do move(x + size < 378, 2, 0);
        return;
    }

    method void move(boolean isMovable, int xShift, int yShift){
        if (isMovable) {
            let x = x + xShift;
            let y = y + yShift;
            do draw();
        }
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}
